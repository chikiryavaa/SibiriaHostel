// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sibiria.API.Data;

#nullable disable

namespace Sibiria.API.Migrations
{
    [DbContext(typeof(SibiriaContext))]
    [Migration("20250609044612_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sibiria.API.Entities.AdminStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableRooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OccupancyRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Performance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TotalBookings")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalVisitors")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AdminStatistics");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ContactType")
                        .HasColumnType("integer");

                    b.Property<string>("ContactValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GuestFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GuestLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Sibiria.API.Entities.BookingService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Amenities")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amenities = "[\"WiFi\",\"TV\",\"Кондиционер\"]",
                            Capacity = 1,
                            Description = "Уютный одноместный номер с всем необходимым.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSr3BoV0X-5Hg3wOj21AtdKFibIBg_vD8JuKg&s\"]",
                            Price = 45.00m,
                            RoomTypeId = 1,
                            Status = 0,
                            Title = "Single Comfort"
                        },
                        new
                        {
                            Id = 2,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\"]",
                            Capacity = 2,
                            Description = "Двухместный номер со стандартными удобствами.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSgJiWc32GaiEhLhMfCimFBWZVdkJaF3ybdXA&s\"]",
                            Price = 75.00m,
                            RoomTypeId = 2,
                            Status = 0,
                            Title = "Double Standard"
                        },
                        new
                        {
                            Id = 3,
                            Amenities = "[\"WiFi\",\"TV\",\"Балкон\"]",
                            Capacity = 2,
                            Description = "Номер с видом на озеро, двухместный.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSy1kei7aaGkOjC0oYr8-LvqdAmvLCHHD4trg&s\"]",
                            Price = 95.00m,
                            RoomTypeId = 2,
                            Status = 0,
                            Title = "Double Lake View"
                        },
                        new
                        {
                            Id = 4,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\",\"Кофемашина\"]",
                            Capacity = 2,
                            Description = "Люкс с отдельной гостиной и рабочей зоной.",
                            ImageUrls = "[\"https://cf.bstatic.com/xdata/images/hotel/max1024x768/682995190.jpg?k=38f0614e45e5fda8be0bd485a17fff76f0c2a093af5b6b170f6a0049925be47d&o=&hp=1\"]",
                            Price = 150.00m,
                            RoomTypeId = 3,
                            Status = 0,
                            Title = "Suite Executive"
                        },
                        new
                        {
                            Id = 5,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\",\"Кухня\",\"Балкон\"]",
                            Capacity = 3,
                            Description = "Престижный президентский люкс с панорамными окнами.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQus7yNdjl9HkVT2D1PWklw6GFMqYEnXw2bsw&s\"]",
                            Price = 300.00m,
                            RoomTypeId = 3,
                            Status = 0,
                            Title = "Suite Presidential"
                        },
                        new
                        {
                            Id = 6,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\",\"Сейф\"]",
                            Capacity = 2,
                            Description = "Номер класса Deluxe с видом на сад.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRzAziFmkAqz2IJX1E_VIe5zAfUqL9oOS8tpg&s\"]",
                            Price = 120.00m,
                            RoomTypeId = 4,
                            Status = 0,
                            Title = "Deluxe Garden View"
                        },
                        new
                        {
                            Id = 7,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\",\"Джакузи\"]",
                            Capacity = 2,
                            Description = "Deluxe-номер около бассейна.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRUHGV8PaGLEcj0MCo-fvkpmhTvEWct4iGwYw&s\"]",
                            Price = 130.00m,
                            RoomTypeId = 4,
                            Status = 0,
                            Title = "Deluxe Poolside"
                        },
                        new
                        {
                            Id = 8,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\",\"Кухня\",\"Игровая зона\"]",
                            Capacity = 4,
                            Description = "Просторный семейный номер, 2 спальни и гостиная.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR01RMWuGbIPd5tPaSWZD3l7b-bTcU-dPBUAw&s\", \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGwxdbJGlFITHDxHbVeAAtI07W7vUsF5Exlw&s\"]",
                            Price = 200.00m,
                            RoomTypeId = 5,
                            Status = 0,
                            Title = "Family Suite"
                        },
                        new
                        {
                            Id = 9,
                            Amenities = "[\"WiFi\",\"TV\"]",
                            Capacity = 1,
                            Description = "Бюджетный одноместный номер.",
                            ImageUrls = "[\"https://webbox.imgix.net/images/zeezklhuxgyflgtp/b7436443-c036-49ed-97d4-6c665ac95a4b.jpg?auto=format,compress&fit=crop&crop=entropy&w=600&h=450\"]",
                            Price = 35.00m,
                            RoomTypeId = 1,
                            Status = 0,
                            Title = "Single Economy"
                        },
                        new
                        {
                            Id = 10,
                            Amenities = "[\"WiFi\",\"TV\",\"Мини-бар\"]",
                            Capacity = 2,
                            Description = "Удобный двухместный номер для двоих гостей.",
                            ImageUrls = "[\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTLh2TWp_a2H1NIFI_qOzcO3MX3_-tIRvxrfQ&s\"]",
                            Price = 85.00m,
                            RoomTypeId = 2,
                            Status = 0,
                            Title = "Double Comfort"
                        });
                });

            modelBuilder.Entity("Sibiria.API.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Небольшой номер для одного гостя.",
                            Name = "Single"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Уютный номер для двоих.",
                            Name = "Double"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Просторный люкс с отдельной гостиной.",
                            Name = "Suite"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Премиум-номер повышенной комфортности.",
                            Name = "Deluxe"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Номер для семьи: большая площадь и дополнительные кровати.",
                            Name = "Family"
                        });
                });

            modelBuilder.Entity("Sibiria.API.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Шведский стол с разнообразными блюдами.",
                            Name = "Breakfast",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Трансфер из аэропорта.",
                            Name = "Airport Pickup",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Абонемент в спа-зону отеля.",
                            Name = "Spa Access",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Дополнительная кровать в номер.",
                            Name = "Extra Bed",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ужин в ресторане отеля.",
                            Name = "Dinner",
                            Price = 20.00m
                        });
                });

            modelBuilder.Entity("Sibiria.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime?>("PasswordResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ivan.ivanov@example.com",
                            FullName = "Иван Иванов",
                            Password = "10000.OSkGP6En/+y1ok8Nh/uRaQ==.z9XFaHQdjGyHh/SxkwMCLPjjw3WCOJrwOHjwbqS5OD8=",
                            Phone = "+7-915-123-4567",
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.petrova@example.com",
                            FullName = "Мария Петрова",
                            Password = "10000.xKsOIRl0TiKHgzqXTanQuw==.jn3shdL8A6CnA7IPMoMyOh9KOi9YKn1B8QboNEJMS4g=",
                            Phone = "+7-916-234-5678",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alexey.smirнов@example.com",
                            FullName = "Алексей Смирнов",
                            Password = "10000.4zsNtW2YJ2uZCbcfsCr62A==.7wAn/dKYtQWwcHS39xCbCOhWzFjOtBt1rA3+sExlp/k=",
                            Phone = "+7-917-345-6789",
                            Role = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ekaterina.кuzнецова@example.com",
                            FullName = "Екатерина Кузнецова",
                            Password = "10000.MBd0wCDNQPKEQElEsLB9vA==.68xO4YtAt6cgiIIX45PatVLS2Qwt70N1Ay5k4oru1Ek=",
                            Phone = "+7-918-456-7890",
                            Role = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "dmitry.соколов@example.com",
                            FullName = "Дмитрий Соколов",
                            Password = "10000.LQn8uOrJqT+Pi3mJuLK4GQ==.a0u2a0/1Mc69zXIoJ4uspoo0MWojYpUufdrXtrG8HzQ=",
                            Phone = "+7-919-567-8901",
                            Role = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "olga.морозова@example.com",
                            FullName = "Ольга Морозова",
                            Password = "10000.RYTLrFWKyCLorHdvP+CSBQ==.DKwM3EJglJg4yyM57zQm1EX8D3VJhm72W+aocb3FIgM=",
                            Phone = "+7-920-678-9012",
                            Role = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sergey.волков@example.com",
                            FullName = "Сергей Волков",
                            Password = "10000.1GHtvZ7cpvhCAdjUHY0BLg==.+s8b8jALBLwDrLzTMNrdCH/6QC+I2LkdhydrgrzXYqY=",
                            Phone = "+7-921-789-0123",
                            Role = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "anna.павлова@example.com",
                            FullName = "Анна Павлова",
                            Password = "10000.XTT5bagFxR1/1VxbYOuGgg==./UEfBb/0y4BX/mrgIp08/p+fFoHU5sRdmlXSw5z7CK8=",
                            Phone = "+7-922-890-1234",
                            Role = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "pavel.sидоров@example.com",
                            FullName = "Павел Сидоров",
                            Password = "10000.1qzLHhpc+UnLIC/Wk7DOZw==.bQv6mF+41wysw+fTvPxys7xOhBvcZggwtkmkV6eme7Y=",
                            Phone = "+7-923-901-2345",
                            Role = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "elena.федорова@example.com",
                            FullName = "Елена Федорова",
                            Password = "10000.XJ0V3DQatKkwE5p4WnKKEA==.5YxX4UzNhRIujhAUPda/5wu3hNA3fNnQhWt2nzc0ZLU=",
                            Phone = "+7-924-012-3456",
                            Role = 0
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin.алексей@example.com",
                            FullName = "Админ Алексей",
                            Password = "10000.tbW5mo/x3yX1yZ1Rw5eHUw==.WRMObtPOpV4Lp51RcVdgWK4lX3x+BQu0FzbCc1FI4iU=",
                            Phone = "+7-925-123-4567",
                            Role = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin.ольга@example.com",
                            FullName = "Админ Ольга",
                            Password = "10000.7wZ9hj2pCP//AxGeLecLqg==.e/kviSPPhl3xr2pMeCpaXMud3QciV83G29/EqRaYklQ=",
                            Phone = "+7-926-234-5678",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Sibiria.Core.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Booking", b =>
                {
                    b.HasOne("Sibiria.API.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibiria.API.Entities.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Sibiria.API.Entities.BookingService", b =>
                {
                    b.HasOne("Sibiria.API.Entities.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sibiria.API.Entities.Service", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Room", b =>
                {
                    b.HasOne("Sibiria.API.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Sibiria.Core.Entities.Payment", b =>
                {
                    b.HasOne("Sibiria.API.Entities.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Sibiria.Core.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Booking", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Sibiria.API.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Sibiria.API.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Sibiria.API.Entities.Service", b =>
                {
                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("Sibiria.API.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
